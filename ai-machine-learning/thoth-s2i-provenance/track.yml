slug: ai-machine-learning-thoth-s2i-provenance
id: 60736gcygyrf
type: track
title: Thoth S2I build with Provenance check on OpenShift
description: |-
  In this tutorial, we are going to build a simple Python app, using Thoth s2i build process and use Thoth's provenance check in the process.

  ## Why to use Thoth provenance check in s2i build process?

  For those who are new to this [s2i](https://docs.openshift.com/container-platform/3.11/using_images/s2i_images/python.html) refers to the Source to image process which
  bundles your source code to a image that can be run on OpenShift.
  The provenance check is done against Pipfile and Pipfile.lock, which are expected as an input to Thoth. The output is a structured report (with metadata) that states issues found in the application stack. Currently reported issues are of the following categories:
   - `ERROR/ARTIFACT-DIFFERENT-SOURCE` - reported if a package/artifact is installed from a different package source index in comparision to the configured one

   - `INFO/ARTIFACT-POSSIBLE-DIFFERENT-SOURCE` - reported if a package/artifact can be installed from a different package source index in comparision to the configured one

   - `WARNING/DIFFERENT-ARTIFACTS-ON-SOURCES` - there are present different artifacts on the package source indexes and configuration does not state explicitly which package source index should be used for installing package - this warning recommends explictly stating package source index to guarantee the expected artifacts are used

   - `ERROR/MISSING-PACKAGE` - the given package was not found on package source index (the configured one or any of other package source indexes available)

   - `ERROR/INVALID-ARTIFACT-HASH` - the artifact hash that is used for the downloaded package was not found on the package source index - possibly the artifact has changed over time (dangerous) or was removed from the package source index

  You can find more about provenance checks, and how the provenance check reports are structured here - [Link](https://thoth-station.ninja/docs/developers/adviser/provenance_checks.html)

  You can find a list of base images which you can use with Thoth in [s2i-thoth repository](https://github.com/thoth-station/s2i-thoth)
  with detailed instructions on how to use Thoth in the OpenShift’s s2i process.
  The container images are hosted at -
  [quay.io](quay.io/organization/thoth-station) with the
  prefix s2i.

  We are going to discover more about it in the next step how you can customize the process.

  In this demo, we are going to use an Openshift 4.2 playground.<br>
  We are operating our services on the MassOpen.cloud [#operatefirst](https://massopen.cloud/connected-initiatives/operate-first)
icon: https://logodix.com/logo/1910931.png
level: intermediate
tags:
- openshift
owner: openshift
developers:
- nvinto@redhat.com
- rjarvine@redhat.com
- mcostant@redhat.com
private: false
published: true
challenges:
- slug: setup
  id: qwurdbwn03zx
  type: challenge
  title: Getting Started
  notes:
  - type: text
    contents: |-
      In this tutorial, we are going to build a simple Python app, using Thoth s2i build process and use Thoth's provenance check in the process.

      ## Why to use Thoth provenance check in s2i build process?

      For those who are new to this [s2i](https://docs.openshift.com/container-platform/3.11/using_images/s2i_images/python.html) refers to the Source to image process which
      bundles your source code to a image that can be run on OpenShift.
      The provenance check is done against Pipfile and Pipfile.lock, which are expected as an input to Thoth. The output is a structured report (with metadata) that states issues found in the application stack. Currently reported issues are of the following categories:
       - `ERROR/ARTIFACT-DIFFERENT-SOURCE` - reported if a package/artifact is installed from a different package source index in comparision to the configured one

       - `INFO/ARTIFACT-POSSIBLE-DIFFERENT-SOURCE` - reported if a package/artifact can be installed from a different package source index in comparision to the configured one

       - `WARNING/DIFFERENT-ARTIFACTS-ON-SOURCES` - there are present different artifacts on the package source indexes and configuration does not state explicitly which package source index should be used for installing package - this warning recommends explictly stating package source index to guarantee the expected artifacts are used

       - `ERROR/MISSING-PACKAGE` - the given package was not found on package source index (the configured one or any of other package source indexes available)

       - `ERROR/INVALID-ARTIFACT-HASH` - the artifact hash that is used for the downloaded package was not found on the package source index - possibly the artifact has changed over time (dangerous) or was removed from the package source index

      You can find more about provenance checks, and how the provenance check reports are structured here - [Link](https://thoth-station.ninja/docs/developers/adviser/provenance_checks.html)

      You can find a list of base images which you can use with Thoth in [s2i-thoth repository](https://github.com/thoth-station/s2i-thoth)
      with detailed instructions on how to use Thoth in the OpenShift’s s2i process.
      The container images are hosted at -
      [quay.io](quay.io/organization/thoth-station) with the
      prefix s2i.

      We are going to discover more about it in the next step how you can customize the process.

      In this demo, we are going to use an Openshift 4.2 playground.<br>
      We are operating our services on the MassOpen.cloud [#operatefirst](https://massopen.cloud/connected-initiatives/operate-first)
  assignment: |-
    Before you get started we recommend reading the following steps. They explain
    a bit about how the playground environment is setup and what access you have.

    ## Logging in to the Cluster via Dashboard

    Click the [Console](https://console-openshift-console-[[HOST_SUBDOMAIN]]-443-[[KATACODA_HOST]].environments.katacoda.com) tab to open the dashboard.

    You will then able able to login with admin permissions with:

    * **Username:** ``admin``
    * **Password:** ``admin``

    ## Logging in to the Cluster via CLI

    When the OpenShift playground is created you will be logged in initially as
    a cluster admin (```
    oc whoami
    ```) on the command line. This will allow you to perform
    operations which would normally be performed by a cluster admin.

    Before creating any applications, it is recommended you login as a distinct
    user. This will be required if you want to log in to the web console and
    use it.

    To login to the OpenShift cluster from the _Terminal_ run:

    ```
    oc login -u admin -p admin
    ```

    This will log you in using the credentials:

    * **Username:** ``admin``
    * **Password:** ``admin``

    Use the same credentials to log into the web console.
    For simplicity we are logging in here as admin.

    ## Creating your own Project

    To create a new project called `myproject` run the command:

    ```
    oc new-project myproject
    ```

    You could instead create the project from the web console. If you do this,
    to change to the project from the command line run the command:

    ```
    oc project myproject
    ```

    Now that you have created your own project, me move to the next
    step.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  difficulty: intermediate
  timelimit: 150
- slug: app
  id: gcwle98lsv4p
  type: challenge
  title: Getting the sample Python app
  assignment: |-
    Before we deploy the app, let's explore the build config and S2I image we will be using.

    Here is the example repo we are going to try today -

    [https://github.com/thoth-station/s2i-example-tensorflow](https://github.com/thoth-station/s2i-example-tensorflow)

    Let's check out the `log-thoth-broken` branch.
    The upstream link to the same is - [https://github.com/thoth-station/s2i-example/tree/log-thoth-broken](https://github.com/thoth-station/s2i-example/tree/log-thoth-broken)

    If you go to app.py, it's a simple Python app that prints `Hello thoth` every 10 seconds.
    And you have a Pipfile that has `daiquiri` as the only package. That is the standard Python project, we are going to experiment with.

    Now let's explore the `openshift.yaml`.
    End of the yaml, we declare the image to be `s2i-thoth-ubi8-py38`
    ```
      - apiVersion: "image.openshift.io/v1"
        kind: ImageStream
        metadata:
          labels:
            app: "s2i-example-log"
          name: "s2i-thoth-ubi8-py38"
        spec:
          tags:
            - name: "latest"
              from:
                kind: "DockerImage"
                name: "quay.io/thoth-station/s2i-thoth-ubi8-py38"
              referencePolicy:
                type: "Source"
    ```
    And we use this under BuildConfig under line 26, stating our source repo to be -
    ```
    git:
        uri: "https://github.com/thoth-station/s2i-example"
        ref: "log-thoth-broken"
    ```
    Now that we have successfully explored the repo, and are using a Thoth powered s2i image, let's explore some configuration options, that
    Thoth image provides out of box.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  difficulty: intermediate
  timelimit: 150
- slug: parameter
  id: vklqumyhxpby
  type: challenge
  title: Thoth s2i parameters
  assignment: |-
    Now finally let's explore the options Thoth s2i build image offers -

    Thoth’s s2i container images can be configured using environment variables supplied to the build config:

    `THOTH_PROVENANCE_CHECK` - verify stack provenance - the provenance check is triggered only if the lock file is not comming from Thoth’s recommendation engine (otherwise the stack has already verified provenance)

    `THOTH_ADVISE` - always use the recommended stack by Thoth (even if Pipfile.lock is present in the repo)

    `THOTH_ASSEMBLE_DEBUG` - run s2i’s assemble script in verbose mode

    `THOTH_DRY_RUN` - submit stack to Thoth’s recommendation engine but do not use the recommended Pipfile.lock file, use the Pipfile.lock file present in the repo instead

    `THOTH_FROM_MASTER` - Use Thamos from git instead of a PyPI release - handy if the released Thamos has a bug which was fixed in the master branch

    `THOTH_HOST` - Thoth’s host to reach out to for recommendations (defaults to prod deployment at khemenu.thoth-station.ninja)

    `THOTH_ERROR_FALLBACK` - fallback to the Pipfile.lock present in the repository if the submitted Thoth analysis fails

    If you go checkout the `openshift.yaml` in [s2i-example/log-thoth-broken](https://github.com/thoth-station/s2i-example/blob/log-thoth-broken/openshift.yaml) and checkout the env block under BuildConfig (ln 57), you will see some of these being used like `THOTH_PROVENANCE_CHECK`, `THAMOS_ADVISE`, `THOTH_DRY_RUN`, `THOTH_HOST`.
    Thamos Host is currently set to `api.moc.thoth-station.ninja`, which is our public facing api.
    And `THOTH_PROVENANCE_CHECK` set to 1, that triggers the provenance check. For this tutorial we have turned of `THOTH_ADVISE=0` to focus on provenance checks only.


    Here are some config option's that you could configure, which
    changes the behaviour of `Thamos` (the cli tool used to interact with Thoth internally.)
     - https://thoth-station.ninja/docs/developers/thamos/

    These env variables can be toggles according to your needs in the `openshift.yaml`.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  difficulty: intermediate
  timelimit: 150
- slug: deploy
  id: ihc00g6xcjvd
  type: challenge
  title: Let's Deploy
  assignment: |-
    Now that you are familiar with the configurations our s2i image offers, let's try deploying our sample app using Thoth's S2I build process.

    Assuming you have followed the steps from before are logged in as an admin into `myproject` in the OpenShift cluster lets deploy -

    As the cluster is ready now, let's try deploying the application using Thoth S2I build process -

    ```
    oc process -f https://raw.githubusercontent.com/thoth-station/s2i-example/log-thoth-broken/openshift.yaml | oc apply -f -
    ```


    Now that you have scheduled it in the terminal on the right, you should see this -
    ```
    buildconfig.build.openshift.io/s2i-example-log created
    deploymentconfig.apps.openshift.io/s2i-example-log created
    imagestream.image.openshift.io/s2i-example-log created
    imagestream.image.openshift.io/s2i-thoth-ubi8-py38 created
    ```

    ### Let's go to Openshift UI and checkout our build process -

    Make sure you have selected `myproject` on the project selector.
    If you go to Builds in the OpenShift UI in the other tab, under `Builds`, you would see `s2i-example-log` and under logs you could inspect the build process.
    You would see `thamos provenance-check` being run your stack.

    You can also check the logs from the terminal. Lets check the logs -

    ```
    oc logs bc/s2i-example-log -f
    ```

    You should keep a eye for these things in the log -
     - Thoth's configuration file after hardware and software discovery (that's the .thoth.yaml being expanded from the template.)
     - Asking Thoth for provenance check... (That is where Thamos interacts with Thoth API)

    If you scroll to the end of it, you should see something similar to this -
    ![provenance fail](https://raw.githubusercontent.com/saisankargochhayat/katacoda-scenarios/master/thoth-provenance/assets/provenance_fail.png)

    We can see `python-json-logger` has an `INVALID-ARTIFACT-HASH`. Let's figure out why this happened -
    If you take a look at the [Pipfile.lock](https://github.com/thoth-station/s2i-example/blob/log-thoth-broken/Pipfile.lock#L29)
    Right there at line 29, we have the corrupt SHA that was caught during the provenance check and we prevented a potentially unsafe package from being uninstalled.

    Now let's pull down the app you deployed and deploy a version that is not broken -

    ```
    oc delete all --selector 'app=s2i-example-log'
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  difficulty: intermediate
  timelimit: 300
- slug: fix
  id: 8pok5v4gaohg
  type: challenge
  title: Fix the error
  assignment: |-
    Now that we know the Thoth's provenance check adeptly caught the error, let's try running it on a fixed version of the repo - [log-thoth-provenance](https://github.com/thoth-station/s2i-example/blob/log-thoth-provenance)
    If you have a look at the [Pipfile.lock](https://github.com/thoth-station/s2i-example/blob/log-thoth-provenance/Pipfile.lock), we have fixed the corrupt hash here.
    We have `THOTH_PROVENANCE_CHECK` turned on, let's try deploying this version.

    You can deploy the fixed version using -

    ```
    oc process -f https://raw.githubusercontent.com/thoth-station/s2i-example/log-thoth-provenance/openshift.yaml | oc apply -f -
    ```


    Now that you have scheduled it in the terminal on the right, you should see this -
    ```
    buildconfig.build.openshift.io/s2i-example-log created
    deploymentconfig.apps.openshift.io/s2i-example-log created
    imagestream.image.openshift.io/s2i-example-log created
    imagestream.image.openshift.io/s2i-thoth-ubi8-py38 created
    ```

    ### Let's go to Openshift UI and checkout our build process -

    Make sure you have selected `myproject` on the project selector.
    If you go to Builds in the OpenShift UI in the other tab, under `Builds`, you would see `s2i-example-log` and under logs you could inspect the build process.
    You would see `thamos provenance-check` being run your stack.

    You can also check the logs from the terminal. Lets check the logs -

    ```
    oc logs bc/s2i-example-log -f
    ```

    You should keep a eye for these things in the log -
     - Thoth's configuration file after hardware and software discovery (that's the .thoth.yaml being expanded from the template.)
     - Asking Thoth for provenance check... (That is where Thamos interacts with Thoth API)

    If you scroll to the end of it, you should see something similar to this -
    ![provenance pass](https://raw.githubusercontent.com/saisankargochhayat/katacoda-scenarios/master/thoth-provenance/assets/provenance_pass.png)

    Provenance check passed! \o/

    You can check the logs from the deployed app using -

    ```
    oc logs -f dc/s2i-example-log
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  difficulty: intermediate
  timelimit: 300
checksum: "10062824505150873752"
