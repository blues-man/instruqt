slug: developing-on-openshift-helm
id: 3xvvirjszgeu
type: track
title: Getting Started with Helm 3 on OpenShift
description: |+
  ## Goal

  Learn how to use the [Helm](https://helm.sh/), a package manager that helps you managing and deploying applications on OpenShift.

  ![Logo](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/developing-on-openshift/helm/logo.png)

  [Helm](https://www.openshift.com/learn/topics/helm) is a package manager for Kubernetes which helps users create templated packages called Helm Charts to include all Kubernetes resources that are required to deploy a particular application.  Helm then assists with installing the Helm Chart on Kubernetes, and afterwards it can upgrade or rollback the installed package when new versions are available.

  # Concepts

  * Helm core concepts
  * Exploring `helm` command line tool
  * Deploying and managing `Helm Charts`
  * Creating your own `Chart`
  * Managing applications lifecycle with Helm `Upgrade` and `Rollback` of releases.
  * Helm integrations with OpenShift UI

  # Use case

  Be able to provide a great experience for both Developers and System Administrators to manage and deploy applications using Helm Charts on top of OpenShift.

  Helm Charts are particularly useful for installation and upgrade of stateless applications given that the Kubernetes resources and the application image can simply be updated to newer versions. The follow-up for this Day 1 experience, is to convert Helm Charts into an Operator, using [Operator Framework](https://github.com/operator-framework) for a complete Day 2 experience for your apps.

  Let's get started!

icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- nvinto@redhat.com
- rjarvine@redhat.com
- cclyburn@redhat.com
private: false
published: true
challenges:
- slug: 01-cli
  id: hugpc1zngt29
  type: challenge
  title: Explore Helm CLI
  notes:
  - type: text
    contents: |+
      ## Goal

      Learn how to use the [Helm](https://helm.sh/), a package manager that helps you managing and deploying applications on OpenShift.

      ![Logo](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/developing-on-openshift/helm/logo.png)

      [Helm](https://www.openshift.com/learn/topics/helm) is a package manager for Kubernetes which helps users create templated packages called Helm Charts to include all Kubernetes resources that are required to deploy a particular application.  Helm then assists with installing the Helm Chart on Kubernetes, and afterwards it can upgrade or rollback the installed package when new versions are available.

      ## Concepts

      * Helm core concepts
      * Exploring `helm` command line tool
      * Deploying and managing `Helm Charts`
      * Creating your own `Chart`
      * Managing applications lifecycle with Helm `Upgrade` and `Rollback` of releases.
      * Helm integrations with OpenShift UI

      ## Use case

      Be able to provide a great experience for both Developers and System Administrators to manage and deploy applications using Helm Charts on top of OpenShift.

      Helm Charts are particularly useful for installation and upgrade of stateless applications given that the Kubernetes resources and the application image can simply be updated to newer versions. The follow-up for this Day 1 experience, is to convert Helm Charts into an Operator, using [Operator Framework](https://github.com/operator-framework) for a complete Day 2 experience for your apps.

      Let's get started!

  assignment: |+
    At the end of this chapter you will be able to:
    - Use `helm` CLI
    - Install `helm repository`
    - Search, install and uninstall `Helm Charts`
    - Review Helm Charts from `OpenShift Console`

    ## HelmÂ Command Line Interface (CLI)

    In this scenario you will find the Helm CLI already installed for you, which can be  also retrieved from OpenShift Console, top right corner, click on ? -> Command Line Tools.

    The CLI is the entry point for any interaction with Helm 3 subsystem. In addition to that, OpenShift Developer Catalog, which is the central hub for all developer content, has support for Helm Charts in addition to Operator-backed services, Templates, etc.

    When a user instructs the Helm CLI to install a Helm Chart, the information about the Helm Chart is fetched from the repository, rendered on the client and then applied to Kubernetes while a record of this installation is created within the namespace (which is known as a Release).

    ![Helm on OpenShift](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/developing-on-openshift/helm/helm-diagram.png)


    ## Logging in to the Cluster

    To login to the OpenShift cluster from the Terminal run:

    ```
    oc login -u admin -p admin https://api.crc.testing:6443 --insecure-skip-tls-verify=true
    ```

    This will log you in using the credentials:

    * **Username:** ``admin``
    * **Password:** ``admin``

    Let's also log in to our web console. This can be done by clicking the **Web Console** tab near the top of your screen.

    You will then be able to login with admin permissions with:
    * **Username:** ``admin``
    * **Password:** ``admin``
    ![Web Console Login](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/pipelines/web-console-login.png)

    Let's create a new OpenShift Project to have a namespace for our helm charts to work with.

    ```
    oc new-project helm
    ```

    ## Exercise: Explore CLI
    Let's get started by using `helm` getting CLI version :

    ```
    helm version
    ```

    This should confirm we are using **Helm 3**.

    As discussed in the previous step, Helm Charts are available through repositories, and those can be pre-installed or installable by the user.

    You can search for Helm Charts available in any public repositories through [Helm Hub](https://hub.helm.sh/).

    For instance, searching Helm Charts for [NGINX](https://nginx.com):

    ```
    helm search hub nginx
    ```

    This will give a list of available charts from multiple repositories. If we want to install it, we need to have such repositories configured.

    By default the list of available repositories is empty. You can add a new one with the CLI. For NGINX, add Bitnami repository:

    ```
    helm repo add bitnami https://charts.bitnami.com/bitnami
    ```

    Once added, verify it is present:

    ```
    helm repo list
    ```

    You can search for Helm Charts also inside repos, like in the one you just installed:

    ```
    helm search repo bitnami/nginx
    ```

    ## Deploy a Helm Chart

    You can use `helm install` command to deploy your charts and start managing revisions.

    To install [NGINX Chart](https://hub.helm.sh/charts/bitnami/nginx):

    ```
    helm install my-nginx bitnami/nginx --set service.type=ClusterIP
    ```

    This will install `nginx`, and for this example, we want to use `ClusterIP` Service type because we want to expose it afterwards through an OpenShift `Route`.

    Check your Helm releases:

    ```
    helm ls
    ```

    Verify all the pods are in Running state and Ready:

    ```
    oc get pods
    ```

    Now expose `my-nginx` service to access it via OpenShift `Route`:

    ```
    oc expose svc/my-nginx
    ```

    Verify that route has been created:

    ```
    oc get routes
    ```

    You can click on the generated host to access the NGINX Pod provided by your just installed Helm Chart, or you can do it from OpenShift Console.

    ## Verify the deployment from OpenShift Console

    To verify the creation of the resources generated by the Helm Chart, you can head out to the OpenShift web console.

    Make sure the Developer perspective from the dropdown in the top left corner of the web console is selected as shown below:

    <img src="https://katacoda.com/embed/openshift/courses/assets/middleware/pipelines/developer-view.png" width="800" />

    Next, select the Project dropdown menu shown below and choose `helm` project you have been working with.

    Next, click on the Topology tab on the left side of the web console if you don't see what's in the image below. Once in the Topology view, you can see the Deployment for `my-nginx` application and you can access it by clicking on the URL generated by the OpenShift Route:

    <img src="https://katacoda.com/embed/openshift/courses/assets/developing-on-openshift/helm/nginx-helm-chart-route.png" width="800" />

    You'll notice the HR label and Helm icon below, this means that this application is managed by Helm, and you can overview Helm `Releases` for this app from left side menu, Helm section:

    <img src="https://katacoda.com/embed/openshift/courses/assets/developing-on-openshift/helm/nginx-helm-releases.png" width="800" />

    Explore all `Resources` that are associated with a particular Helm `Release`, click on `my-nginx` Helm Release and then click on `Resouces` tab:

    <img src="https://katacoda.com/embed/openshift/courses/assets/developing-on-openshift/helm/nginx-helm-resources-view.png" width="800" />

    # Uninstall and clean

    Come back to Terminal clicking on Terminal tab.

    Uninstall `my-nginx` release:

    ```
    helm uninstall my-nginx
    ```

    Delete previously created `route`:

    ```
    oc delete route my-nginx
    ```

  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  - title: Visual Editor
    type: code
    hostname: container
    path: /root
  difficulty: basic
  timelimit: 600
- slug: 02-first-chart
  id: phnktxgopn6g
  type: challenge
  title: Create your first Helm Chart
  assignment: |
    At the end of this chapter you will be able to:
    - Create your own `Helm Chart`
    - Understand `Helm Templates`
    - Understand Helm integrations with `Kubernetes`


    After having discovered `helm` CLI to install and manage Helm Charts, we can now create our first one from scratch. Before doing that, let's review the core concepts from [official documentation](https://helm.sh/docs/topics/charts/):

    - A `Chart` is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster.
    - A `Repository` is the place where charts can be collected and shared.
    - A `Release` is an instance of a chart running in a Kubernetes cluster-


    Helm uses a packaging format called charts. A chart is a collection of files that describe a related set of Kubernetes resources, and it organized as a collection of files inside of a directory. The directory name is the name of the chart.

    ## Creating a new Helm Chart

    Navigate to `/opt` directory:

    ```
    cd /root
    ```

    With `helm create` command you can create a chart directory along with the common files and directories used in a chart.

    An Helm chart called `my-chart` has been already generated with the following command:

    `helm create my-chart`


    Inside `my-chart/` folder you will find the following files, you can also review them from the **Visual Editor** Tab.

    ```
    cd my-chart
    ls -la
    ```

    * `Chart.yaml`: is a YAML file containing multiple fields describing the chart
    * `values.yaml`:: is a YAML file containing default values for a chart, those may be overridden by users during helm install or helm upgrade.
    * `templates/NOTES.txt`: text to be displayed to your users when they run helm install.
    * `templates/deployment.yaml`: a basic manifest for creating a Kubernetes deployment
    * `templates/service.yaml`: a basic manifest for creating a service endpoint for your deployment
    * `templates/_helpers.tpl`: a place to put template helpers that you can re-use throughout the chart

    This command generates a skeleton of your Helm Chart, and by default there is an NGINX image as example:


    **1. Chart description**

    Let's review our `Chart.yaml`. This contains `version` of the package and `appVersion` that we are managing, typically this can be refered to a container image tag.

    **2. Fill chart with custom values**

    In our example, we are working on a Helm Template `templates/deployment.yaml` describing a Kubernetes Deployment for our app, containing this structure for `spec.containers.image`:

    `image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"`

    > **Note:** *By default `appVersion` from `Chart.yaml` is used as image tag*

    In `values.yaml` add `image.repository` variable to define the container image for our chart.

    From the **Visual Editor** Tab, open `values.yaml` file and add this line after the `# TODO: image repository` comment:

    ```yaml
    repository: bitnami/nginx
    ```

    Now let's define which tag to use for this container image.
    Add this line after the `# TODO: image tag"` comment:

    ```yaml
    tag: latest
    ```


    **3. Install**

    Install our custom Helm Chart from local folder.

    ```
    cd /root
    helm install my-chart ./my-chart
    ```

    This will install NGINX like in previous chapter, and we can follow installation like in previous chapter, either from Terminal or OpenShift Console:

    ```
    oc get pods
    ```

    <img src="https://katacoda.com/embed/openshift/courses/assets/developing-on-openshift/helm/my-chart-helm-chart.png" width="800" />

    Review installed revision:

    ```
    helm ls
    ```

    In next chapter we will add an OpenShift Route as a Helm Template, like for `Service`, to be published in a new revision.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  - title: Visual Editor
    type: code
    hostname: container
    path: /root/my-chart
  difficulty: basic
  timelimit: 600
- slug: 03-revision
  id: vvmdo6mdop5c
  type: challenge
  title: Manage Revisions
  assignment: |
    At the end of this chapter you will be able to:
    - Manage multiple `Helm Revisions` for your Helm Chart
    - `Upgrade` revisions for new changes
    - Revert changes with `Rollback` of revisions

    ## Upgrade revisions

    When we install a Helm Chart on OpenShift, we publish a release into the cluster that we can control in terms of upgrades and rollbacks.

    To change something in any already published chart, we can use `helm upgrade` command with new parameters or code from our chart.

    ## Add OpenShift Route as Template

    From the Visual Editor, create a new template for OpenShift Route in `templates` directory. From the `templates` directory, create a new file called `routes.yaml`. Copy the following content to that file:

    ```yaml
    apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: {{ include "my-chart.fullname" . }}
      labels:
        {{- include "my-chart.labels" . | nindent 4 }}
    spec:
      port:
        targetPort: http
      to:
        kind: Service
        name: {{ include "my-chart.fullname" . }}
        weight: 100
      wildcardPolicy: None
    ```

    Run `helm upgrade` to publish a new revision containing a `my-charm` Route:

    ```
    helm upgrade my-chart ./my-chart
    ```

    Verify new `Route` from Terminal:

    ```
    oc get routes
    ```

    Verify new `Revision`:

    ```
    helm ls
    ```

    Verify new `Route` and new `Revision` from Console:

    <img src="https://katacoda.com/embed/openshift/courses/assets/developing-on-openshift/helm/my-chart-helm-chart-route.png" width="800" />

    <img src="https://katacoda.com/embed/openshift/courses/assets/developing-on-openshift/helm/my-chart-new-revision.png" width="800" />


    ## Upgrade and Rollback

    Let's update again our existing release overriding values in `values.yaml` changing `image.pullPolicy` from chart's default value `IfNotPresent` to `Always`, using same method we adopted previously for changing `service.type` with option `--set`:

    ```
    helm upgrade my-chart ./my-chart --set image.pullPolicy=Always
    ```

    Let's verify that our changes is reflected into resulting `Deployment`:

    ```
    oc get deployment my-chart -o yaml | grep imagePullPolicy
    ```

    Get current `Revision`:

    ```
    helm ls
    ```

    Now that our new release is published and verified, we can decide to rollback to previous version if we need to, and this is possible with `helm rollback` command.

    It is also possible to dry-run the rollback with `--dry-run` option:

    ```
    helm rollback my-chart 2 --dry-run
    ```

    Rollback to starting revision:

    ```
    helm rollback my-chart 2
    ```

    Check pods:

    ```
    oc get pods
    ```

    Verify `imagePullPolicy` is rolled back to `Revision` 2 containing `IfNotPresent` Policy:

    ```
    oc get deployment my-chart -o yaml | grep imagePullPolicy
    ```


    ## Uninstall

    Uninstall will clean everything now, there's no further need to delete manually the `Route` like in first chapter, since the Helm Chart is now managing that resource:

    ```
    helm uninstall my-chart
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  - title: Visual Editor
    type: code
    hostname: container
    path: /root/my-chart
  difficulty: basic
  timelimit: 600
checksum: "14990396350448359938"
