slug: developing-with-spring-spring-getting-started
id: xxibx6sdsuvj
type: track
title: Getting Started with Spring
description: |
  In this scenario, you will learn more about developer application using Spring Boot using [Red Hat Runtimes](https://www.redhat.com/en/products/runtimes).

  ## What you will learn
  You will learn how to get started with building a CRUD (Create, Read, Update and Delete) web application.

  ## How is Spring Boot supported on OpenShift?

  Spring is one of the most popular Java Frameworks and offers an alternative to the Java EE programming model. Spring is also very popular for build application based on Microservices Architecture. Spring Boot is a popular tool in the Spring eco system that helps with organizing/using 3rd party libraries together with Spring and also provides a mechanism for boot strapping embeddable runtimes, like Apache Tomcat. Bootable applications (sometimes also called fat jars) fits the container model very well since in a container platform like OpenShift responsibilities like starting, stopping and monitoring applications are then handled by the container platform instead of an Application Server.

  Red Hat fully supports Spring and Spring Boot for usage on the OpenShift platform as part of Red Hat Runtimes. Red Hat also provides full support for Apache Tomcat, Hibernate and Apache CXF (for REST services) when used in a Spring Boot application on Red Hat Runtimes.
icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- doh@redhat.com
private: false
published: true
challenges:
- slug: 01-review-the-initial-project
  id: xapvoenkbw0f
  type: challenge
  title: Step 1
  notes:
  - type: text
    contents: |
      In this scenario, you will learn more about developer application using Spring Boot using [Red Hat Runtimes](https://www.redhat.com/en/products/runtimes).

      ## What you will learn
      You will learn how to get started with building a CRUD (Create, Read, Update and Delete) web application.

      ## How is Spring Boot supported on OpenShift?

      Spring is one of the most popular Java Frameworks and offers an alternative to the Java EE programming model. Spring is also very popular for build application based on Microservices Architecture. Spring Boot is a popular tool in the Spring eco system that helps with organizing/using 3rd party libraries together with Spring and also provides a mechanism for boot strapping embeddable runtimes, like Apache Tomcat. Bootable applications (sometimes also called fat jars) fits the container model very well since in a container platform like OpenShift responsibilities like starting, stopping and monitoring applications are then handled by the container platform instead of an Application Server.

      Red Hat fully supports Spring and Spring Boot for usage on the OpenShift platform as part of Red Hat Runtimes. Red Hat also provides full support for Apache Tomcat, Hibernate and Apache CXF (for REST services) when used in a Spring Boot application on Red Hat Runtimes.
  assignment: |
    # Import the code

    Let's refresh the code we'll be using. Run the following command to clone the sample project in Terminal 1:

    ```
    cd /root/projects && rm -rf rhoar-getting-started && git clone https://github.com/openshift-katacoda/rhoar-getting-started && cd rhoar-getting-started/spring/spring-rhoar-intro
    ```

    # Review the base structure of the application

    For your convenience, this scenario has been created with a base project using the Java programming language and the Apache Maven build tool.

    Initially, the project is almost empty and doesn't do anything. Start by reviewing the content by executing from the *Visual Editor* Tab.


    As you can see, there are some files that we have prepared for you in the project. Under src/main/resources/index.html we have, for example, prepared an HTML file for you. Except for the jkube directory and the index.html, this matches very well what you would get if you generate an empty project from the [Spring Initializr](https://start.spring.io) web page. For the moment you can ignore the content of the jkube folder (we will discuss this later).

    One that differs slightly is the `pom.xml`. Please open the and examine it a bit closer (but do not change anything at this time)

    ``pom.xml``

    As you review the content, you will notice that there are a lot of **TODO** comments. **Do not remove them!** These comments are used as a marker and without them, you will not be able to finish this scenario.

    Notice that we are not using the default BOM (Bill of material) that Spring Boot project typically use. Instead, we are using a BOM provided by Red Hat as part of the [Snowdrop](http://snowdrop.me/) project.

    ```xml
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>me.snowdrop</groupId>
            <artifactId>spring-boot-bom</artifactId>
            <version>${spring-boot.bom.version}</version>
            <type>pom</type>
            <scope>import</scope>
          </dependency>
        </dependencies>
      </dependencyManagement>
    ```

    We use this bill of material to make sure that we are using the version of for example Apache Tomcat that Red Hat supports.

    **1. Adding web (Apache Tomcat) to the application**

    Since our applications (like most) will be a web application, we need to use a servlet container like Apache Tomcat or Undertow. Since Red Hat offers support for Apache Tomcat (e.g., security patches, bug fixes, etc.), we will use it.

    >**NOTE:** Undertow is another an open source project that is maintained by Red Hat and therefore Red Hat plans to add support for Undertow shortly.


    To add Apache Tomcat to our project all we have to do is to add the following lines in `pom.xml` at the `<!-- TODO: Add web (tomcat) dependency here pass:[-->]` marker in Visual Editor:

    ```xml
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    ```

    Click on the `Disk` icon to save the files or press `CTRL-S`:

    ![Visual Editor](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/rhoar-getting-started-spring/save-pom-file.png)

    **2. Test the application locally**

    As we develop the application, we might want to test and verify our change at different stages. We can do that locally, by using the `spring-boot` maven plugin.

    Run the application by executing the below command in Terminal 1:

    ```
    mvn spring-boot:run
    ```

    >**NOTE:** The Katacoda terminal window is like your local terminal. Everything that you run here you should be able to execute on your local computer as long as you have a `Java JDK 11` and `Maven`. In later steps, we will also use the `oc` command line tool.

    **3. Verify the application**

    To begin with, open the app from the *Fruit App* Tab.

    You should now see an HTML page that looks like this:

    ![Local Web Browser Tab](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/rhoar-getting-started-spring/web-page.png)

    As you can probably guess by now the application we are building is a Fruit repository where we create, read, update and delete different kinds of fruits.


    > **NOTE:** None of the button works at this stage since we haven't implemented services for them yet, but we will shortly do that.

    ## Congratulations

    You have now successfully executed the first step in this scenario.

    Now you've seen how to get started with Spring Boot development on Red Hat OpenShift Application Runtimes

    In next step of this scenario, we will add the logic to be able to read a list of fruits from the database.

    Make sure to stop the Spring Boot app via pressing `CTRL-C` in Terminal 1.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root/projects/rhoar-getting-started/spring/spring-rhoar-intro
  - title: Fruit App
    type: service
    hostname: crc
    path: /
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: 02-read-content-from-a-database
  id: wjgexwsejw3e
  type: challenge
  title: Step 2
  assignment: |
    # Read content from a database

    In Step 1 you learned how to get started with our project. In this step, we will add functionality for our Fruit basket application to display content from the database.

    **1. Adding JPA (Hibernate) to the application**

    Since our applications (like most) will need to access a database to read retrieve and store fruits entries, we need to add Java Persistence API to our project.

    The default implementation in Spring Boot is Hibernate which has been tested as part of the Red Hat Runtimes.

    >**NOTE:** Hibernate is another Open Source project that is maintained by Red Hat and it will soon be productized (as in fully supported) in Red Hat Runtimes.

    From *Visual Editor* Tab, add Hibernate to our project by opening the `pom.xml` file and adding after the `<!-- TODO: Add JPA dependency here -->` comment this code:

    ```xml
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
    ```

    When testing starting locally or when running test we also need to use a local database. H2 is a small in-memory database that is perfect for testing but is not recommended for production environments. To add H2 add the following dependency at the comment `<!-- TODO: ADD H2 database dependency here -->` in the `pom.xml`:

    ```xml
            <dependency>
              <groupId>com.h2database</groupId>
              <artifactId>h2</artifactId>
              <scope>runtime</scope>
            </dependency>
    ```

    Save the file.

    **2. Create an Entity class**

    We are going to implement an Entity class that represents a fruit. This class is used to map our object to a database schema.

    First, we need to create the java class file. From the *Visual Editor* Tab, create this file: `src/main/java/com/example/service/Fruit.java`.

    ![File](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/rhoar-getting-started-spring/create-file-fruit-sb.png)

    Open the `Fruit.java` file then copy the below content into the file:

    ```java
    package com.example.service;

    import javax.persistence.Entity;
    import javax.persistence.GeneratedValue;
    import javax.persistence.GenerationType;
    import javax.persistence.Id;

    @Entity
    public class Fruit {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Integer id;

        private String name;

        public Fruit() {
        }

        public Fruit(String type) {
            this.name = type;
        }

        public Integer getId() {
            return id;
        }

        public void setId(Integer id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }
    ```

    Save the file.

     **3. Create a repository class for our content**

    The repository should provide methods for insert, update, select and delete operations on Fruits from the database. We use Spring Data which provides us with lots of boilerplate code. All we have to do is to add an interface that extends the `CrudRepository<Fruit, Integer>` interface provided by Spring Data.

    First, we need to create the java class file.  From the *Visual Editor* Tab, create this file: `src/main/java/com/example/service/FruitRepository.java`

    Copy the below content into the file:

    ```java
    package com.example.service;

    import org.springframework.data.repository.CrudRepository;

    public interface FruitRepository extends CrudRepository<Fruit, Integer> {
    }
    ```

    Save the file.

    **4. Populate the database with initial content**

    To pre-populate the database with content, Hibernate offers a nifty feature where we can provide a SQL file that populates the content.

    First, we need to create the SQL  file.  From the *Visual Editor* Tab, create this file: `src/main/resources/import.sql`

    Copy the below content into the file:

    ```sql
    insert into fruit (name) values ('Cherry');
    insert into fruit (name) values ('Apple');
    insert into fruit (name) values ('Banana');
    ```

    Save the file.

    **5. Add a test class**
    Verify that we can use the `FruitRepository` for retrieving and storing Fruit objects by creating a test class.

    First, we need to create the java class file. From the *Visual Editor* Tab, create this file: ``src/test/java/com/example/ApplicationTest.java``

    Copy the below content into the file:

    ```java
    package com.example;

    import static org.assertj.core.api.Assertions.assertThat;

    import java.util.Optional;

    import org.junit.jupiter.api.Test;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.boot.test.context.SpringBootTest;
    import org.springframework.transaction.annotation.Transactional;

    import com.example.service.Fruit;
    import com.example.service.FruitRepository;

    @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
    @Transactional
    public class ApplicationTest {

        @Autowired
        private FruitRepository fruitRepository;

        @Test
        public void testGetAll() {
            assertThat(this.fruitRepository.findAll())
              .isNotNull()
              .hasSize(3);
        }

        @Test
        public void getOne() {
            assertThat(this.fruitRepository.findById(1))
              .isNotNull()
              .isPresent();
        }

        @Test
        public void updateAFruit() {
            Optional<Fruit> apple = this.fruitRepository.findById(2);

            assertThat(apple)
              .isNotNull()
              .isPresent()
              .get()
              .extracting(Fruit::getName)
              .isEqualTo("Apple");

            Fruit theApple = apple.get();
            theApple.setName("Green Apple");
            this.fruitRepository.save(theApple);

            assertThat(this.fruitRepository.findById(2))
              .isNotNull()
              .isPresent()
              .get()
              .extracting(Fruit::getName)
              .isEqualTo("Green Apple");
        }

        @Test
        public void createAndDeleteAFruit() {
            int orangeId = this.fruitRepository.save(new Fruit("Orange")).getId();
            Optional<Fruit> orange = this.fruitRepository.findById(orangeId);
            assertThat(orange)
              .isNotNull()
              .isPresent();

            this.fruitRepository.delete(orange.get());

            assertThat(this.fruitRepository.findById(orangeId))
              .isNotNull()
              .isNotPresent();
        }

        @Test
        public void getWrongId() {
            assertThat(this.fruitRepository.findById(9999))
              .isNotNull()
              .isNotPresent();
        }
    }
    ```

    Save the file.

    Take some time to review the tests. The `testGetAll` test returns all fruits in the repository, which should be three because of what the content in `import.sql`. The `getOne` test will retrieve the fruit with id 1 (e.g., the Cherry) and then check that it's not null. The `getWrongId` check that if we try to retrieve a fruit id that doesn't exist and check that fruitRepository return null.

    **6. Run and verify**

    We can now test that our `FruitRepository` can connect to the data source, retrieve data and
    Run the application by executing the below command in Terminal 1:

    ```
    mvn verify -f /root/projects/rhoar-getting-started/spring/spring-rhoar-intro
    ```

    In the console you should now see the following:

    ```
    Results :

    Tests run: 5, Failures: 0, Errors: 0, Skipped: 0
    ```

    ## Congratulations

    You have learned how to create and test a data repository that can create, read, update and delete content from a database. We have been testing this with an in-memory database, but later we will replace this with a full blow SQL server running on OpenShift, but first, we should create REST services that the web page can use to update content.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root/projects/rhoar-getting-started/spring/spring-rhoar-intro/
  difficulty: basic
  timelimit: 600
- slug: 03-create-rest-services
  id: e8fklskjqvc1
  type: challenge
  title: Step 3
  assignment: |
    # Create REST services for the fruit web application


    **1. Add a service**

    First, Create a new `src/main/java/com/example/service/FruitController.java` file in Visual Editor.

    Then, copy the below content into the file:

    ```java
    package com.example.service;

    import java.util.Objects;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
    import org.springframework.web.bind.annotation.DeleteMapping;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PathVariable;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.PutMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    @RequestMapping("/api/fruits")
    public class FruitController {

        private final FruitRepository repository;

        public FruitController(FruitRepository repository) {
            this.repository = repository;
        }

        @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
        public Iterable<Fruit> getAll() {
            return this.repository.findAll();
        }

    //TODO: Add additional service calls here
    }
    ```

    Save the file.

    Take a minute and review the `FruitController`. At this stage is pretty simple and only has one method that exposes an endpoint for HTTP GET request for path `/api/fruits`, as specified in the class annotation `@RequestMapping(value = "/api/fruits")`. We should now be able to see a list of fruits on the web page.

    **2. Test the service from a web browser locally**

    Run the application by executing the below command in Termnial 1:

    ```bash
    mvn spring-boot:run -DskipTests -f /root/projects/rhoar-getting-started/spring/spring-rhoar-intro
    ```

    >**NOTE:** We skip the tests to speed up the start and since we do not have any tests for the REST service. Please note that the `spring-boot-crud-booster` [here](https://github.com/snowdrop/spring-boot-crud-booster) has test cases for REST, please review them if interested.

    In the interest of time, we will skip creating test cases for the service and instead test it directly in our web browser.

    When the console reports that Spring is up and running access the *Fruit App* Tab.

    If everything works the web page should look something like this:

    ![Fruit List](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/rhoar-getting-started-spring/fruit-list.png)

    Press <kbd>CTRL</kbd>+<kbd>C</kbd> to stop the application.

    **3. Create additional service for update, create and delete**

    Add the following methods to the Fruit Controller at the TODO marker.

    ```java
        @ResponseStatus(HttpStatus.CREATED)
        @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
        public Fruit post(@RequestBody(required = false) Fruit fruit) {
            verifyCorrectPayload(fruit);

            return this.repository.save(fruit);
        }

        @GetMapping(path = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
        public Fruit get(@PathVariable("id") Integer id) {
            verifyFruitExists(id);

            return this.repository.findById(id).orElse(null);
        }

        @PutMapping(path = "/{id}", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
        public Fruit put(@PathVariable("id") Integer id, @RequestBody(required = false) Fruit fruit) {
            verifyFruitExists(id);
            verifyCorrectPayload(fruit);

            fruit.setId(id);
            return this.repository.save(fruit);
        }

        @ResponseStatus(HttpStatus.NO_CONTENT)
        @DeleteMapping("/{id}")
        public void delete(@PathVariable("id") Integer id) {
            verifyFruitExists(id);

            this.repository.deleteById(id);
        }

        private void verifyFruitExists(Integer id) {
            if (!this.repository.existsById(id)) {
                throw new RuntimeException(String.format("Fruit with id=%d was not found", id));
            }
        }

        private void verifyCorrectPayload(Fruit fruit) {
            if (Objects.isNull(fruit)) {
                throw new RuntimeException("Fruit cannot be null");
            }

            if (!Objects.isNull(fruit.getId())) {
                throw new RuntimeException("Id field must be generated");
            }
        }
    ```

    Save the file.

    **5. Run and verify**

    Build and start the application again

    ```bash
    mvn spring-boot:run -DskipTests -f /root/projects/rhoar-getting-started/spring/spring-rhoar-intro
    ```

    Now that we have implemented all the services we are now able to see fruits on the page, and also update, create and delete them.

    When the console reports that Spring is up and running access the app from the *Fruit App* Tab.

    Press <kbd>CTRL</kbd>+<kbd>C</kbd> to stop the application.

    ## Congratulations

    You have now learned how to how to create REST Services that access a database.

    In next step of this scenario, you will learn how to access and login to your openshift environment.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root/projects/rhoar-getting-started/spring/spring-rhoar-intro
  - title: Fruit App
    type: service
    hostname: crc
    path: /
    port: 8080
  difficulty: basic
  timelimit: 600
- slug: 04-login-to-openshift
  id: asy4fupx9uzi
  type: challenge
  title: Step 4
  assignment: |
    # Login to OpenShift Container Platform

    **Red Hat OpenShift Container Platform** is the preferred runtime for the **Red Hat Runtimes** like **Spring Boot**, **Vert.x** etc. The OpenShift Container Platform is based on **Kubernetes** which is a Container Orchestrator that has grown in popularity and adoption over the last years. **OpenShift** is currently the only container platform based on Kubernetes that offers multitenancy. This means that developers can have their own personal, isolated projects to test and verify application before committing to a shared code repository.

    OpenShift also ships with a feature rich web console as well as command line tools to provide users with a friendly interface to work with applications deployed to the platform.

    **1. Open the OpenShift Web Console**

    OpenShift ships with a web-based console that will allow users to perform various tasks via a browser.

    Click on `OpenShift Web Console` tab then, login using the following credentials from the Web using.

    *Note* that you might see *Your connection is not private* notification due to using an untrusted security certificate. Then, proceed to access the OpenShift web console via clicking *Advanced* option.

    * Username:
    ```
    developer
    ```

    * Password:
    ```
    developer
    ```

    ![Web Console Login](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/quarkus/login.png)

    Run **Skip Tour** to skip the new user introduction, you will be presented with a list of projects that your user has permission to view.

    ![Web Console Projects](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/rhoar-getting-started-spring/projects.png)

    Click on your new project name to be taken to the project overview page which will show you various options to add content to your project, create an application, component or service:

    ![Web Console Overview](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/rhoar-getting-started-spring/overview-new.png)

    There's nothing there now, but that's about to change.

    **2. Login to OpenShift Container Platform**

    Run the following command to login with the OpenShift CLI:

    ```
    oc login -u developer -p developer
    ```

    You should see:

    ```bash
    Login successful.
    You don't have any projects. You can try to create a new project, by running `oc new-project <projectname>`
    ```

    **3. Create project**

    [Projects](https://docs.openshift.com/container-platform/4.7/rest_api/project_apis/project-project-openshift-io-v1.html) are a top-level concept to help you organize your deployments. An OpenShift project allows a community of users (or a user) to organize and manage their content in isolation from other communities. Each project has its own resources, policies (who can or cannot perform actions), and constraints (quotas and limits on resources, etc.). Projects act as a wrapper around all the application services and endpoints you (or your teams) are using for your work.

    For this scenario, let's create a project that you will use to house your applications.

    ```
    oc new-project dev --display-name="Dev - Spring Boot App"
    ```

    ## Congratulations

    You have now learned how to access your openshift environment.

    In next step of this scenario, we will deploy our application to the OpenShift Container Platform.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root/projects/rhoar-getting-started/spring/spring-rhoar-intro
  - title: OpenShift Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  difficulty: basic
  timelimit: 600
- slug: 05-deploy-to-openshift
  id: jxugo7guedyk
  type: challenge
  title: Step 5
  assignment: |
    # Deploy to OpenShift Application Platform

    For running locally the H2 Database has been a good choice, but when we now move into a container platform we want to use a more production-like database, and for that, we are going to use PostgreSQL.

    Before we deploy the application to OpenShift and verify that it runs correctly, there are a couple of things we have do. We need to add a driver for the PostgreSQL database that we are going to use, and we also need to add health checks so that OpenShift correctly can detect if our application is working.


    **1. Create the database**

    Since this is your own personal project you need to create a database instance that your application can connect to. In a shared environment this would typically be provided for you, that's why we are not deploying this as part of your application. It's however very simple to do that in openshift. All you need to do is to execute the below command in Terminal 1.

    ```
    oc new-app -e POSTGRESQL_USER=luke \
                 -e POSTGRESQL_PASSWORD=secret \
                 -e POSTGRESQL_DATABASE=my_data \
                 openshift/postgresql:12-el8 \
                 --name=my-database
    ```

    **2. Review Database configuration**

    Take some time and review from the *Visual Editor* Tab the `src/main/jkube/deployment.yml` file.

    As you can see that file specifies a couple of elements that are needed for our deployment. It also uses the username and password from a Kubernetes Secret. For this environment we are providing the secret in this file ``src/main/jkube/credentials-secret.yml``, however in a production environment this would likely be provided to you by the Ops team.

    Now, review the `src/main/resources/application-openshift.properties`

    In this file, we are using the configuration from the `deployment.yml` to read username, password, and other connection details.

    **3. Add the PostgreSQL database driver**

    So far our application has only used the H2 Database, we now need to add a dependency for PostgreSQL driver. We do that by adding a runtime dependency under the `openshift` profile in ``pom.xml``.

    ```xml
            <dependency>
              <groupId>org.postgresql</groupId>
              <artifactId>postgresql</artifactId>
              <scope>runtime</scope>
            </dependency>
    ```

    **4. Add a health check**

    We also need a health check so that OpenShift can detect when our application is responding correctly. Spring Boot provides a nice feature for this called Actuator, which exposes health data under the path `/health`. All we need to do is to add the following dependency to ``pom.xml`` at the **TODO** comment..

    ```xml
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
    ```
    Save the file.

    **5. Deploy the application to OpenShift**

    Run the following command to deploy the application to OpenShift:

    ```
    mvn package oc:deploy -Popenshift -DskipTests -f /root/projects/rhoar-getting-started/spring/spring-rhoar-intro
    ```

    This step may take some time to do the Maven build and the OpenShift deployment. After the build completes you can verify that everything is started by running the following command:

    ```
    oc rollout status dc/spring-getting-started
    ```

    Then either go to the OpenShift web console and click on get the URL of the app.

    Run this command to get the app's Route:

    ```
    oc get route spring-getting-started -n dev -o jsonpath='{"http://"}{.spec.host}{"\n"}'
    ```

    Make sure that you can add, edit, and remove fruits, using the web application.

    # Open the solution in an IDE in the Cloud!
    Want to continue exploring this solution on your own in the cloud? You can use the free [Red Hat CodeReady Workspaces](https://developers.redhat.com/products/codeready-workspaces/overview) IDE running on the free [Red Hat Developer Sandbox](http://red.ht/dev-sandbox). [Click here](https://workspaces.openshift.com) to login or to register if you are a new user. This free service expires after 30 days, but you can always enable a new free 30-day subscription.

    Once logged in, [click here](https://workspaces.openshift.com/f?url=https://raw.githubusercontent.com/openshift-katacoda/rhoar-getting-started/solution/spring/spring-rhoar-intro/devfile.yaml) to open the solution for this project in the cloud IDE. While loading, if it asks you to update or install any plugins, you can say no.

    ## Congratulations

    You have now learned how to deploy a Spring Boot application using a database to OpenShift Container Platform. This concludes the first learning scenario for Spring Boot.

    Click Summary for more details and suggested next steps.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root/projects/rhoar-getting-started/spring/spring-rhoar-intro
  difficulty: basic
  timelimit: 600
checksum: "15517802202342234011"
