slug: enterprise-java-middleware-javaee8
id: wrzasidvh4pp
type: track
title: Jakarta EE 8 Development
description: |
  ## What you will learn ##

  In this scenario, you will learn how to get started with developing Jakarta EE 8 application using JBoss Enterprise Application Platform on OpenShift. This scenario is targeted for developers that haven't used Jakarta EE before and covers the most common parts of Jakarta EE 8.


  ## What is Red Hat JBoss EAP?

  JBoss Enterprise Application Platform is a leading Jakarta EE platform that includes full Jakarta EE 8 support.

  What differs JBoss Enterprise Application Platform compared to for example Oracle速 WebLogic Application Server and IBM速 WebSphere Application Server ND are that JBoss EAP since version 6 and later has been architectured to be used both in cloud environments as well as more traditional environments like Virtual or Bare metal.

  This scenario exclusively uses JBoss EAP on OpenShift, which is the leading container platform for Kubernetes and containers, but as a developer, you can also apply what you learn here on other environments.

  ![EAP Logo](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/middleware-javaee8/eap-logo.png)
icon: https://logodix.com/logo/1910931.png
level: intermediate
tags:
- openshift
owner: openshift
developers:
- doh@redhat.com
private: false
published: true
challenges:
- slug: 01-review-the-weather-app
  id: rpgteonttjic
  type: challenge
  title: Review the weather application
  notes:
  - type: text
    contents: |
      ## What you will learn ##

      In this scenario, you will learn how to get started with developing Jakarta EE 8 application using JBoss Enterprise Application Platform on OpenShift. This scenario is targeted for developers that haven't used Jakarta EE before and covers the most common parts of Jakarta EE 8.


      ## What is Red Hat JBoss EAP?

      JBoss Enterprise Application Platform is a leading Jakarta EE platform that includes full Jakarta EE 8 support.

      What differs JBoss Enterprise Application Platform compared to for example Oracle速 WebLogic Application Server and IBM速 WebSphere Application Server ND are that JBoss EAP since version 6 and later has been architectured to be used both in cloud environments as well as more traditional environments like Virtual or Bare metal.

      This scenario exclusively uses JBoss EAP on OpenShift, which is the leading container platform for Kubernetes and containers, but as a developer, you can also apply what you learn here on other environments.

      ![EAP Logo](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/middleware-javaee8/eap-logo.png)
  assignment: |
    **Background**

    To help illustrate the most common features of Jakarta EE 8, you will build a web application called `Weather App`. The application allows users to see weather information in the largest cities per country.

    ![The Weather App](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/middleware-javaee8/weather-app.png)

    A user can switch country by clicking on one of the flags in the menu.

    ![The Weather App](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/middleware-javaee8/flags.png)

    To save time there is a skeleton project with a prototype version that returns a hard-coded list of cities. What you will achieve are:

    1. Deploy the prototype to OpenShift
    2. Read the weather information from a database (internal at first)
    3. Allow the user to choose a country
    4. Connect the application to an external database with weather information

    ### Review the current state of the prototype app

    **Front-end**
    The web application is a single page `./src/main/webapp/index.html`. In short, the front-end uses Bootstrap and jQuery. It uses REST to contact the back-end.

    **Domain model**
    Two Java classes represent the domain model for our application, `src/main/java/com/redhat/example/weather/Country.java` and `src/main/java/com/redhat/example/weather/City.java`.

    ![The Weather App](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/middleware-javaee8/domain-model.png)

    **REST application using JAX-RS**
    The prototype already implements a simple REST based service to allow the front-end to retrieve a country object with a list of cities to display. To enable JAX-RS it's required to provide a class that extends the `javax.ws.rs.core.Application`  and configure the base URI (path) that is used to expose services. In the prototype, this is done in the `src/main/java/com/redhat/example/weather/RestApplication.java`. In that class, we set the base URI to `/api`, which means that any call to the back-end using that URI is routed to the JAX-RS subsystem.

    **Weather REST Service**
    The current weather service `src/main/java/com/redhat/example/weather/WeatherService.java` already implement a simple REST service using JAX-RS and returns a List with one country that is currently hard-coded. We will change that later in this service.

    **User state**
    Finally, for convenience, the prototype also includes `src/main/java/com/redhat/example/weather/SelectedCountry.java` . This class is not in use at the moment, but we will make use of it later. The class is annotated with `@SessionScope` which tells the application server that the state of this class should be stored in the session scope. E.g., the state is maintained between different requests from the front-end to the back-end. However, if the user closes the browser or is inactive for too long, the state is removed. Using the session is a convenient way to store temporary state for a user that is ephemeral. For a persistent state, a database is typically used.

    **Build configuration**
    The prototype also includes build configuration in the `pom.xml`. The build configuration is pretty simple but does include the `wildfly-maven-plugin`. Since we will be deploying to OpenShift, we will not use that plugin, but it's included here if you would like to use this project as a base for local development.

    ### Summary
    If you are new to Jakarta EE development, the prototype might seem to include a lot "magic", but most of the code in here is normal Java and should be familiar if you have developed Java applications before. The reason we are providing this prototype is to be able to focus on Jakarta EE as quickly as possible and not spend time with setup.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root
  difficulty: intermediate
  timelimit: 600
- slug: 02-deploy-to-openshift
  id: t9n7eg5rax7a
  type: challenge
  title: Deploy to OpenShift
  assignment: |
    # Deploy to OpenShift

    An appropriate Java runtime has been installed for you for building the app. Ensure you can use it by running this command in Terminal 1:

    > If the command fails, wait a few moments and try again (it is installed in a background process and make take a few moments depending on system load).

    ```
    $JAVA_HOME/bin/java --version
    ```

    The command should report the version in use, for example (the versions and dates may be slightly different than the below example):

    ```console
    openjdk 11 2018-09-25
    OpenJDK Runtime Environment 18.9 (build 11+28)
    OpenJDK 64-Bit Server VM 18.9 (build 11+28, mixed mode)
    ```

    **Red Hat OpenShift Container Platform** is the preferred cloud runtime for JBoss EAP
    OpenShift Container Platform is based on **Kubernetes** which is the most used Orchestration for containers running in production. We assume you understand the basics of OpenShift, if not, please complete [Introduction to OpenShift]( https://learn.openshift.com/introduction/) course and come back here.

    **1. Login to OpenShift Container Platform**

    To authenticate to the OpenShift Container Platform, we will use the **oc** command and then specify the server that we
    want to authenticate to:

    ```
    oc login -u developer -p developer
    ```

    Congratulations, you are now authenticated to the OpenShift server.

    **2. Create project**

    For this scenario, you will build a REST service that manages products that we deploy on OpenShift.

    ```
    oc new-project my-project --display-name="Weather App"
    ```

    **3. Login to OpenShift**

    Click on `OpenShift Web Console` tab then, login using the following credentials from the Web using.

    *Note* that you might see *Your connection is not private* notification due to using an untrusted security certificate. Then, proceed to access the OpenShift web console via clicking *Advanced* option.

    * Username:
    ```
    developer
    ```

    * Password:
    ```
    developer
    ```

    After you have authenticated to the web console, click **Skip Tour** to bypass the initial new user tour (feel free to visit it later on). After that, you will be on the initial screen listing the projects you're able to work with, including your newly created _my-project_.

    ![EAP Logo](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/middleware-javaee8/projects.png)

    Click on your new project name to be taken to the project topology page which will initially be empty ("No resources found") but that's about to change.

    Now that you've logged into OpenShift, let's deploy a single JBoss EAP instance. The deployed JBoss EAP instance will in this step not be connected to a database, but we will see an example of that in a later scenario.

    **3. Deploy JBoss EAP image**

    To deploy our application we first have to create a container. JBoss EAP comes with a S2I image that packages all the binaries that are needed at runtime. S2I stands for Source-To-Image and is a convenient way for developers to provide either an artifact (E.g. WAR, JAR, etc) or the source code directly and OpenShift will then build a container image for you, so there is no need to have a local container build system and as a developer you do not have to care about patching and maintaining the base image.

    We will use the following command to create a build configuration in OpenShift:

    ```
    oc new-build jboss-eap73-openjdk11-openshift:7.3 --binary=true --name=weather-app
    ```

    This command tells openshift to use a base image including JBoss EAP 7.3 with the name `weather-app`  and finally, we tell it to use what is called binary deployment. Binary deployment means that we will build the Java artifacts locally (using maven) and let the S2I process build a container where that artifact is deployed in JBoss EAP.

    Now, build the application by executing the following maven command.

    ```
    mvn clean package -f /root/projects/rhoar-getting-started/javaee/weather-app
    ```

    We are now ready to upload our artifact (a WAR file) to the build "weather-app" process that we created earlier.

    ```
    oc start-build weather-app --from-file=/root/projects/rhoar-getting-started/javaee/weather-app/target/ROOT.war --follow
    ```

    This command will upload the artifact to the build config that we created before and start building a container. Please note that this might take a while the first time you execute it since openshift will have to download the EAP image. Next time it will go much faster.

    When the build is finished, we are ready to create your application.

    ```
    oc new-app weather-app -l app.openshift.io/runtime=jboss
    ```

    The command new-app will create a running instance based on the container that we built before, and a label `-l` that gives it a nice icon on the topology view.

    Go back to the [Topology view](https://console-openshift-console-[[HOST_SUBDOMAIN]]-443-[[KATACODA_HOST]].environments.katacoda.com/topology/ns/my-project/graph) and verify that the application comes up correctly (look for the dark blue circle):

    ![EAP Logo](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/middleware-javaee8/initial-deploy.png)

    **4. Expose service route**

    Now that our application is running in a container we also have to expose the application to be accessed outside the internal OpenShift network. For that we need to create a route that will forward traffic ffrom the external OpenShift router to our service.

    Let's do that next.

    ```
    oc expose svc weather-app
    ```

    You'll notice a new route link icon on the topology view. Click it to access the app:

    ![EAP Logo](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/middleware-javaee8/route-link.png)

    You should see the app running:

    ![EAP Logo](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/middleware-javaee8/initial-app.png)

    You won't yet be able to select different country flags (you'll get an error popup) - this we will fix in the next step.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root/projects/rhoar-getting-started/javaee/weather-app/
  - title: OpenShift Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  difficulty: intermediate
  timelimit: 600
- slug: 03-jpa
  id: g4w8eqayvtvr
  type: challenge
  title: Basics of Java Persistance
  assignment: |
    **1. What is Java Persistence API?**

    The Java Persistence API (JPA) is a Java application programming interface specification that describes the management of relational data in applications using Java Platform. Java Persistence API removes a lot of boilerplate code and helps bridge the differences between the object modules (used in Object-oriented languages like Java) and the relational model (used in relational databases like PostgreSQL速, MySQL速, Oracle速 DB, etc.). JPA is commonly used in both Jakarta EE and other frameworks like Spring Data.

    The JPA implementation in JBoss EAP is called Hibernate, which is a Red Hat-lead open source project. Hibernate is probably the most popular JPA implementation known for its stability and performance.

    **2. Enable JPA in JBoss EAP**
    Jakarta EE has sometimes received criticism for being too big, making application servers slow and requiring too much resources, but to be fair Jakarta EE is only a specification of different API's and how they should work. How these specifications are implemented are left to the application server, and while there are application servers that are slow and requires a lot of resources, JBoss EAP is a modern application server based on a modular architecture using subsystems to implement Jakarta EE technologies. Many of these modules are only started when an application makes uses of them. So  if you are only using parts of all the features in Jakarta EE, JBoss EAP will not waste resources like memory and CPU with unused subsystems.

    The way you enable JPA in JBoss EAP merely is by putting a `persistence.xml` file on the classpath. The `persistence.xml` file is anyway required by the JPA specification and holds the base configuration, for example, which datasource to use.

    Our first step is to create a `persistence.xml` file in `src/main/resources/META-INF` in Visual Editor tab.

    ![File](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/middleware-javaee8/create-file-persistence.png)

    Open the `persistence.xml` file then copy the following content to the file.

    ```xml
    <?xml version="1.0" encoding="UTF-8"?>
    <persistence version="2.1"
                xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="
            http://xmlns.jcp.org/xml/ns/persistence
            http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
        <persistence-unit name="primary">
            <jta-data-source>java:jboss/datasources/WeatherDS</jta-data-source>
            <properties>
                <!-- Properties for Hibernate -->
                <property name="hibernate.hbm2ddl.auto" value="create-drop" />
                <property name="hibernate.show_sql" value="true" />
            </properties>
        </persistence-unit>
    </persistence>
    ```

    Click on the `Disk` icon to save the files or press `CTRL-S`:

    ![Visual Editor](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/middleware-javaee8/save-persistence-file.png)

    Note that we are giving the persistence unit the name `primary` and instructing it to use the JTA datasource called `java:jboss/datasources/WeatherDS`. There are also two hibernate specific properties configured here. The first is `hibernate.hbm2ddl.auto` which is set to `create-drop`. This tells Hibernate to create the necessary database schema when the application is deployed and drop (.e.g. delete) the schema when it's undeployed. This assumes that we are starting from an empty database and will delete the content of the database when undeployed. This is of course not a setting we want to have in production. A common setting is to use `verify`, which will check that the database schema matches the object model and otherwise fail to deploy. However, for the convenience of this scenario, we will leave it at `create-drop` for now. The second property `hibernate.show_sql` and will configure hibernate to log all SQL queries in the JBoss EAP server.log.

    **3. Create a datasource**

    Next step is to create the datasource. Usually this is done by configuring JBoss EAP using web-console, CLI scripts, or similar. At this stage, we haven't created a database yet, but for test and development purposes we can use an in-memory database like H2. We can define it as follows.

    Create a `src/main/webapp/WEB-INF/weather-ds.xml` file and copy the following content to the file:

    ```xml
    <?xml version="1.0" encoding="UTF-8"?>
    <datasources xmlns="http://www.jboss.org/ironjacamar/schema"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://www.jboss.org/ironjacamar/schema http://docs.jboss.org/ironjacamar/schema/datasources_1_0.xsd">
        <!-- The datasource is bound into JNDI at this location. We reference
            this in META-INF/persistence.xml -->
        <datasource jndi-name="java:jboss/datasources/WeatherDS"
                    pool-name="weather" enabled="true"
                    use-java-context="true">
            <connection-url>jdbc:h2:mem:weather;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1</connection-url>
            <driver>h2</driver>
            <security>
                <user-name>sa</user-name>
                <password>sa</password>
            </security>
        </datasource>
    </datasources>
    ```

    Save the file.

    Now that we have both the JPA persistence configuration and the datasource configuration in place we are ready to extend our model to work with JPA.

    **4. Add JPA annotation to the data model**

    JPA is a very non-intrusive framework, and all we need to do is to add a couple of annotation to the objects in the domain model.

    Let's start with the `City` class. Open `src/main/java/com/redhat/example/weather/City.java`

    First, we need to tell JPA that this class is an Entity, meaning that it needs to be able to persist to the database. We do this by adding the `@Entity` annotation. Either to that manually at the comment `//TODO: Add Entity annotation` or click the **Copy To Editor**

    ```java
    @Entity
    ```

    Then, we need to indicate which field is to be considered the primary key for the object. We do this by adding annotation `@Id` to the field `private String id`.

    ```java
    @Id
    ```

    Save the file.

    That's it! We are now ready to retrieve object of the type City. However, We also have a data model for Country that holds a list of Cities. Let's go ahead and annotate that as well.

    Open `src/main/java/com/redhat/example/weather/Country.java`

    Add `@Entity` annotation to the class definition.

    ```java
    @Entity
    ```

    Then add `@Id` annotation to  `public String id`;

    ```java
    @Id
    ```

    Now, we also need to tell JPA that the `private List<City> cities;` are related to each other. The relationship is what DB's calls *One-To-Many*, meaning that one single `Country` object has zero, one or more related `City` objects. In JPA we can accomplish this by adding `@OneToMany` annotation to it.

    ```java
    @OneToMany(fetch = FetchType.EAGER)
    ```

    Save the file.

    Here we also use an attribute called fetch, and we set it to type `FetchType.EAGER`. The reason for this is that the default fetch type is `FetchType.LAZY`, which means that `City` object related to the Country object isn't retrieved from the database until requests. However, since we are going to return a Country object from a REST service as a JSON string that looks like this:

    ```json
    {
      "cities": [
        {
          "id": "lon",
          "maxTemp": 11,
          "minTemp": 7,
          "name": "London",
          "temp": 9,
          "tempFeelsLike": 9,
          "weatherType": "sunny",
          "wind": 3
        },
        {
          "id": "man",
          "maxTemp": 8,
          "minTemp": 5,
          "name": "Manchester",
          "temp": 7,
          "tempFeelsLike": 3,
          "weatherType": "rainy-7",
          "wind": 10
        },
        {
          "id": "edi",
          "maxTemp": -6,
          "minTemp": -9,
          "name": "Edinburgh",
          "temp": -7,
          "tempFeelsLike": -13,
          "weatherType": "snowy-4",
          "wind": 7
        }
      ],
      "id": "en",
      "name": "England"
    }
    ```

    Because of the way that Json-b works we need to cities to be retrieved together with the country object, so therefor we set it to `FetchType.EAGER`.

    That is it. We are ready to start using the JPA model. So the next task is to update the rest service to collect it from the database.

    **5. Update the rest service to return content from the database**

    To find or persist the object in the database using JPA provides an API object called `EntityManager`. Getting an EntityManager is fairly simple since all we have to do is to inject it using `@PersistenceContext`.

    Open `src/main/java/com/redhat/example/weather/WeatherService.java`

    At the TODO comment inject the entity manager like this:

    ```java
        @PersistenceContext(unitName = "primary")
        EntityManager em;
    ```

    Note, that we also set the unitName to *primary*. That is actually not necessary since we only have a single persistence unit, JPA would use that one, but as a best practice it's always good to refer to named persistence units.

    Now we can use the `EntityManager` to collect Country object. There are many different API calls we can do including creating our own query, however the fastest and easiest way is to use a methods called `find(Class returnType,Object key)` like this:

    ```java
          return em.find(Country.class,"en");
    ```

    Save the file.

    At the moment the country id is hardcoded as "en", but in the next scenario we will learn how to use CDI to let the user select which country they want to display.

    **6. Deploy the updates**

    We are now ready to test our application in OpenShift.

    First, build the application and verify that we do not have any compilation issues.

    ```
    mvn clean package -f /root/projects/rhoar-getting-started/javaee/weather-app
    ```

    This will produce a WAR file called ROOT.war under the target directory.

    Next, build a container by starting an OpenShift S2I build and provide the WAR file as input.

    ```
    oc start-build weather-app --from-file=/root/projects/rhoar-getting-started/javaee/weather-app/target/ROOT.war --follow
    ```

    When the build has finished, you can test the REST endpoint directly using for example curl.

    ```bash
    APP_URL=`oc get route weather-app -n my-project -o jsonpath='{"http://"}{.spec.host}{"/api/weather"}{"\n"}'`
    curl -s $APP_URL | jq
    ```

    > **Note:** that it might take a couple of seconds for the application to start so if the command fails at first, please try again.

    You should see:

    ```json
    {
      "cities": [
        {
          "id": "lon",
          "maxTemp": 11,
          "minTemp": 7,
          "name": "London",
          "temp": 9,
          "tempFeelsLike": 9,
          "weatherType": "sunny",
          "wind": 3
        },
        {
          "id": "man",
          "maxTemp": 8,
          "minTemp": 5,
          "name": "Manchester",
          "temp": 7,
          "tempFeelsLike": 3,
          "weatherType": "rainy-7",
          "wind": 10
        },
        {
          "id": "edi",
          "maxTemp": -6,
          "minTemp": -9,
          "name": "Edinburgh",
          "temp": -7,
          "tempFeelsLike": -13,
          "weatherType": "snowy-4",
          "wind": 7
        }
      ],
      "id": "en",
      "name": "England"
    }
    ```

    You can also test the web application by clicking the route link in OpenShift Web Console.

    # Save Environment variable

    We'll refer to this URL often, so run this command to save it in an environment variable called `APP_URL` (and put it in the Bash shell startup in case we open new terminals later):

    ```bash
    echo "export APP_URL=${APP_URL}" >> /root/.bashrc
    ```

    **Summary**

    We have now connected our application to use an in-memory database to collect the data. If you wonder where the data comes from we are using a Hibernate specific feature where you can load data into the database by adding it to `src/main/resources/import.sql`. The database tables that are generated here are `City`,`Country` and `Country_City`. The later one is a mapping table that maps Cities with Countries and could potentially be made more efficient by instead using a Foreign key, but in that case, we would have to extend the domain model objects.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root/projects/rhoar-getting-started/javaee/weather-app/
  difficulty: intermediate
  timelimit: 600
- slug: 04-cdi
  id: jaeln22uhtvz
  type: challenge
  title: Basics of CDI
  assignment: |
    **1. What is CDI**

    CDI, aka Context Dependency Injection, is the core dependency injection framework of the Jakarta EE platform. It provides a uniform architecture for dependency injection and the life cycle management of managed beans. CDI is sometimes compared to Spring Dependency Injection, and it has a lot of similar features, but CDI is tightly integrated with Jakarta EE and is used by many other specifications too, for example, enable control over producing EntityManager from JPA and other resources like JMS queues, etc.

    **2. Enable CDI**
    To activate CDI we need to create a beans archive and include beans.xml file in the META-INF directory of the classpath. Let's add an empty beans.xml file.

    Create a `src/main/webapp/WEB-INF/beans.xml` file then, copy the following content.

    ```xml
    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="
          http://xmlns.jcp.org/xml/ns/javaee
          http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"
          bean-discovery-mode="all">
    </beans>
    ```

    Save the file.

    **3. Let the user select the country**

    The application already has a session scoped bean `src/main/java/com/redhat/example/weather/SelectedCountry.java` that can store the users last selected country. The storage is temporary and will be removed as soon as the user closes the browser or the session times out.

    To change country the user clicks on one of the flags, it will trigger an HTTP PUT call to `/api/country/{code}` where the code is the country code. We, therefore, need to implement a REST service that updates the selected country.

    Open `src/main/java/com/redhat/example/weather/CountryService.java`.

    Using CDI we can inject a reference to the SelectedCountry. Since the selected country is annotated with @SessionScope we don't have to care about retrieving a HttpSession object or similar. Instead, we can safely assume that an update to the selected country object will be kept in the user's session.

    ```java
        @Inject
        SelectedCountry selectedCountry;
    ```

    We can now create a rest service that allows the user to set the country of choice. Our REST service needs to be annotated with @PUT and since the `RestApplication` defines a base path to `/api` and the `CountryService` defines a path of `country` we only need to add a @Path annotation specifying `{code}`. The brackets tell JAX-RS that this is a path parameter and that it will match to any request matching `/api/country/*`. Our rest service should look like this:

    ```java
        @PUT
        @Path("/{code}")
        public void setSelectedCountry(@PathParam("code") String countryCode) {
            selectedCountry.setCode(countryCode);
        }
    ```

    Save the file.

    We are now ready to extend the `WeatherService` class to make use of the user selected country instead of hard-coding the country id.

    Open  `src/main/java/com/redhat/example/weather/WeatherService.java` and inject the user selected country.

    ```java
        @Inject
        SelectedCountry selectedCountry;
    ```

    Then we can replace the hardcoded value of "en" and instead invoke.

    ```java
    selectedCountry.getCode()
    ```

    Save the file.

    That's it. Now, as soon as we have deployed the app, users can dynamically change the country by just clicking one of the flags.

    **6. Deploy the application**

    We are now ready to test our application in OpenShift.

    First, build the application and verify that we do not have any compilation issues.

    ```
    mvn clean package -f /root/projects/rhoar-getting-started/javaee/weather-app
    ```

    This command produces a WAR file called ROOT.war under the target directory.

    Next, build a container by starting an OpenShift S2I build and provide the WAR file as input.

    ```
    oc start-build weather-app --from-file=/root/projects/rhoar-getting-started/javaee/weather-app/target/ROOT.war --follow
    ```

    When the build has finished, you can test the REST endpoint directly using for example curl.

    ```bash
    curl -s $APP_URL | jq
    ```

    > **Note:** that it might take a couple of seconds for the application to start so if the command fails at first, please try again.

    You should see the same output as before.

    You can also test the web application by clicking the route link in OpenShift Web Console.

    Verify that you can change the cities shown by clicking the different flags.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root/projects/rhoar-getting-started/javaee/weather-app
  difficulty: intermediate
  timelimit: 600
- slug: 05-database
  id: ydyvazhz3dg1
  type: challenge
  title: Externalize the data storage
  assignment: |
    So far we have been using an in-memory database that is part of JBoss EAP. However, JBoss EAP only provides this to make it easy to develop and test application. The in-memory database H2 is not recommended for production use.

    In this part, you will learn how to setup a simple PostgreSQL database in OpenShift, how to configure a datasource within the JBoss EAP image that connects to the database, and finally how to make use of that database in your application.

    **1. Remove the internal in-memory database**

    If you recall in step 03 we create a datasource definition as part of the deployment. Let's update it to use PostgresQL.

    Open the `src/main/webapp/WEB-INF/weather-ds.xml` file and replace its content for PostgresQL:

    ```xml
    <?xml version="1.0" encoding="UTF-8"?>
    <datasources xmlns="http://www.jboss.org/ironjacamar/schema"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.jboss.org/ironjacamar/schema http://docs.jboss.org/ironjacamar/schema/datasources_1_0.xsd">
      <!-- The datasource is bound into JNDI at this location. We reference
          this in META-INF/persistence.xml -->
      <datasource jndi-name="java:jboss/datasources/WeatherDS"
                  pool-name="weather" enabled="true"
                  use-java-context="true">
          <connection-url>jdbc:postgresql://weather-postgresql:5432/weather-db</connection-url>
          <driver>postgresql.jar</driver>
          <security>
              <user-name>weather-app-user</user-name>
              <password>secret</password>
          </security>
      </datasource>
    </datasources>
    ```

    Save the file.

    This configures our app to access the database using a hostname of `weather-postgresql` and corresponding ports, usernames, and password. We'll need to deploy Postgres itself to respond to these connection requests.

    **2. Start a PostgreSQL database**

    To start a PostgreSQL database in OpenShift we can simply use the image provided as part of the OpenShift distribution.

    ```
    oc new-app -e POSTGRESQL_USER=weather-app-user -e POSTGRESQL_PASSWORD=secret -e POSTGRESQL_DATABASE=weather-db --name=weather-postgresql -l app.openshift.io/runtime=postgresql postgresql:10
    ```

    By using the `-e` flag, we can also pass a set of environment variables that will configure and setup the PostgreSQL database. These environment variables are pretty self explaining. The `-l` flag adds a nice icon to our deployment topology view for the database.

    You can see the new database spinning up on the [Topology view](https://console-openshift-console-[[HOST_SUBDOMAIN]]-443-[[KATACODA_HOST]].environments.katacoda.com/topology/ns/my-project/graph):

    ![Postgres topology view](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/middleware-javaee8/postgres-topology.png)

    **3. Deploying the application**

    We are now ready to test our application in OpenShift using an external database.

    First, build the application and verify that we do not have any compilation issues.

    ```
    mvn clean package -f /root/projects/rhoar-getting-started/javaee/weather-app
    ```

    Since EAP does not ship with a Postgres DB driver by default, we'll need to download it and include it with our application. Click the following command to download the driver to the `target/` directory:

    ```
    curl -o /root/projects/rhoar-getting-started/javaee/weather-app/target/postgresql.jar https://jdbc.postgresql.org/download/postgresql-42.2.20.jar
    ```

    Next, build a container by starting an OpenShift S2I build and provide the files as input.

    ```
    oc start-build weather-app --from-dir=/root/projects/rhoar-getting-started/javaee/weather-app/target/ --follow
    ```

    When the build has finished, you can test the REST endpoint directly using for example curl:

    ```bash
    curl -s $APP_URL | jq
    ```

    > **Note:** that it might take a couple of seconds for the application to start so if the command fails at first, please try again.

    You should see the same output as before.

    You can also test the web application by clicking the route link in OpenShift Web Console.

    Note: that it might take a couple of seconds for the application to start so if you see an error page wait 30 secs and then try again.

    **4. Verify the database**

    Open [this](http://weather-app-my-project.[[HOST_SUBDOMAIN]]-80-[[KATACODA_HOST]].environments.katacoda.com/index.html) link and click on the US flag. Note the weather icon in New York. It should be sunny:

    ![Sunny](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/middleware-javaee8/sunny.png)

    Let's update the database and set it to rainy instead.

    ```
    oc rsh deployment/weather-postgresql
    ```

    ```
    psql -U $POSTGRESQL_USER $POSTGRESQL_DATABASE -c "update city set weathertype='rainy-5' where id='nyc'";
    ```

    Now, reload the weather page for US and check the weather icon in New York. It should now be rainy.

    ![Rainy](https://raw.githubusercontent.com/openshift-instruqt/instruqt/master/assets/middleware/middleware-javaee8/rainy.png)
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: crc
  - title: Visual Editor
    type: code
    hostname: crc
    path: /root/projects/rhoar-getting-started/javaee/weather-app
  difficulty: intermediate
  timelimit: 600
checksum: "8436122214981056368"
