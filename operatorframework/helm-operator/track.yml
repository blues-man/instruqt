slug: operatorframework-helm-operator
id: zut0opgzzeqx
type: track
title: Operator SDK with Helm
description: |-
  In the previous learning modules, we covered how to easily create the following types of Operators with the Operator SDK:

  * **Go**:
  Ideal for traditional software development teams that want to get to a fully auto-pilot Operator. It gives you the ability to leverage the same Kubernetes libraries the upstream projects uses under the hood. Check out the [Go Getting Started guide](https://sdk.operatorframework.io/docs/building-operators/golang/).

  * **Ansible**:
  Useful for infrastructure-focused teams that have investment in Ansible modules but want to use them in a Kubernetes-native way. Also great for using Ansible to configure off-cluster objects like hardware load balancers. Check out the [Ansible Getting Started guide](https://sdk.operatorframework.io/docs/building-operators/ansible/).

  We will now focus on the easiest way to get started developing an Operator:

  * **Helm**:
  It doesn’t rely on manual invocation of Helm to reconfigure your apps. Check out the [Helm Operator Getting Started guide](https://sdk.operatorframework.io/docs/building-operators/helm/) for more information.

  ## Creating a CockroachDB Operator from a Helm Chart

  In this tutorial, we will create a CockroachDB Operator from an existing [CockroachDB Helm Chart](https://github.com/helm/charts/tree/master/stable/cockroachdb).

  [CockroachDB](https://www.cockroachlabs.com) is a distributed SQL database built on a transactional and strongly-consistent key-value store. It can:

  * Scale horizontally.
  * Survive disk, machine, rack, and even datacenter failures with minimal latency disruption and no manual intervention.
  * Supports strongly-consistent ACID transactions and provides a familiar SQL API for structuring, manipulating, and querying data.

  Let's begin!
icon: https://logodix.com/logo/1910931.png
level: beginner
tags:
- openshift
owner: openshift
developers:
- yurimsa@gmail.com
- nvinto@redhat.com
private: false
published: true
challenges:
- slug: step1
  id: 5hpifojphhpf
  type: challenge
  title: Initialize the Project
  notes:
  - type: text
    contents: |-
      In the previous learning modules, we covered how to easily create the following types of Operators with the Operator SDK:

      * **Go**:
      Ideal for traditional software development teams that want to get to a fully auto-pilot Operator. It gives you the ability to leverage the same Kubernetes libraries the upstream projects uses under the hood. Check out the [Go Getting Started guide](https://sdk.operatorframework.io/docs/building-operators/golang/).

      * **Ansible**:
      Useful for infrastructure-focused teams that have investment in Ansible modules but want to use them in a Kubernetes-native way. Also great for using Ansible to configure off-cluster objects like hardware load balancers. Check out the [Ansible Getting Started guide](https://sdk.operatorframework.io/docs/building-operators/ansible/).

      We will now focus on the easiest way to get started developing an Operator:

      * **Helm**:
      It doesn’t rely on manual invocation of Helm to reconfigure your apps. Check out the [Helm Operator Getting Started guide](https://sdk.operatorframework.io/docs/building-operators/helm/) for more information.

      ## Creating a CockroachDB Operator from a Helm Chart

      In this tutorial, we will create a CockroachDB Operator from an existing [CockroachDB Helm Chart](https://github.com/helm/charts/tree/master/stable/cockroachdb).

      [CockroachDB](https://www.cockroachlabs.com) is a distributed SQL database built on a transactional and strongly-consistent key-value store. It can:

      * Scale horizontally.
      * Survive disk, machine, rack, and even datacenter failures with minimal latency disruption and no manual intervention.
      * Supports strongly-consistent ACID transactions and provides a familiar SQL API for structuring, manipulating, and querying data.

      Let's begin!
  assignment: |
    Let's begin by connecting to OpenShift:

    ```
    oc login -u admin -p admin https://api.crc.testing:6443 --insecure-skip-tls-verify=true
    ```

    Create a new project called `myproject`:

    ```
    oc new-project myproject
    ```

    Let's now create a new directory for our project:

    ```
    mkdir -p $HOME/projects/cockroachdb-operator
    ```

    Navigate to the directory:

    ```
    cd $HOME/projects/cockroachdb-operator
    ```

    Create a new Helm-based Operator SDK project for the CockroachDB Operator:

    ```
    operator-sdk init --plugins=helm --domain example.com
    ```

    Automatically fetch the Cockroachdb Helm Chart and generate the CRD/API:

    ```
    operator-sdk create api --helm-chart=cockroachdb --helm-chart-repo=https://charts.helm.sh/stable --helm-chart-version=3.0.7
    ```

    ### Project Scaffolding Layout

    After creating a new operator project the directory has numerous generated folders and files. The following
    table describes a basic rundown of each generated file/directory.

    | File/Folders   | Purpose                           |
    | :---           | :--- |
    | config | Kustomize YAML definitions required to launch our controller on a cluster. It is the target directory to hold our CustomResourceDefinitions, RBAC configuration, and WebhookConfigurations.
    | Dockerfile | The container build file used to build your Ansible Operator container image. |
    | helm-charts | The location for the specified helm-charts. |
    | Makefile | Make targets for building and deploying your controller. |
    | PROJECT | Kubebuilder metadata for scaffolding new components. |
    | watches.yaml | Contains Group, Version, Kind, and desired chart. |
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: container
    path: /root
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  difficulty: basic
  timelimit: 200
- slug: step2
  id: doczktsdkf4t
  type: challenge
  title: Update the Watches File
  assignment: |-
    The `watches.yaml` file maps a Group, Version, and Kind to a specific Helm Chart. Observe the contents of the `watches.yaml`:

    ```
    cd /root/projects/cockroachdb-operator/ && \
      cat watches.yaml
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: container
    path: /root
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  difficulty: basic
  timelimit: 200
- slug: step3
  id: fy1mpur5hcns
  type: challenge
  title: Apply the CockroachDB Custom Resource Definition
  assignment: |
    Apply the CockroachDB Custom Resource Definition to the cluster:

    ```
    oc apply -f config/crd/bases/charts.example.com_cockroachdbs.yaml
    ```

    Once the CRD is registered, there are two ways to run the Operator:

    * As a Pod inside a Kubernetes cluster
    * As a Go program outside the cluster using Operator-SDK. This is great for local development of your Operator.

    For the sake of this tutorial, we will run the Operator as a Go program outside the cluster using Operator-SDK and our `kubeconfig` credentials

    Once running, the command will block the current session. You can continue interacting with the OpenShift cluster by using another terminal tab. You can quit the session by pressing `CTRL + C`.

    ```
    WATCH_NAMESPACE=myproject make run
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: container
    path: /root
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  difficulty: basic
  timelimit: 200
- slug: step4
  id: rx4dx5ohrzwj
  type: challenge
  title: Apply the CockroachDB Custom Resource
  assignment: |
    From navigate to the `cockroachdb-operator` top-level directory:

    ```
    cd projects/cockroachdb-operator
    ```

    Before applying the CockroachDB Custom Resource, observe the CockroachDB Helm Chart `values.yaml`:

    [CockroachDB Helm Chart Values.yaml file](https://github.com/helm/charts/blob/master/stable/cockroachdb/values.yaml)

    Update the CockroachDB Custom Resource at `config/samples/charts_v1alpha1_cockroachdb.yaml` with the following values:

    * `spec.statefulset.replicas: 1`
    * `spec.storage.persistentVolume.size: 1Gi`
    * `spec.storage.persistentVolume.storageClass: local-storage`

    ```yaml
    apiVersion: charts.example.com/v1alpha1
    kind: Cockroachdb
    metadata:
      name: cockroachdb-sample
    spec:
      statefulset:
        replicas: 1
      storage:
        persistentVolume:
          size: 1Gi
          storageClass: local-storage
    ```

    You can easily update this file by running the following command:

    ```
    \cp /tmp/charts_v1alpha1_cockroachdb.yaml config/samples/charts_v1alpha1_cockroachdb.yaml
    ```

    After updating the CockroachDB Custom Resource with our desired spec, apply it to the cluster. Ensure you are currently scoped to the `myproject` Namespace:

    ```
    oc project myproject
    ```


    ```
    oc apply -f config/samples/charts_v1alpha1_cockroachdb.yaml
    ```

    Confirm that the Custom Resource was created:

    ```
    oc get cockroachdb
    ```

    It may take some time for the environment to pull down the CockroachDB container image. Confirm that the Stateful Set was created:

    ```
    oc get statefulset
    ```

    Confirm that the Stateful Set's pod is currently running:

    ```
    oc get pods -l app.kubernetes.io/component=cockroachdb
    ```

    Confirm that the CockroachDB "internal" and "public" ClusterIP Service were created:

    ```
    oc get services
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: container
    path: /root
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  difficulty: basic
  timelimit: 200
- slug: step5
  id: wvfjnrudgycz
  type: challenge
  title: Access the CockroachDB Web UI
  assignment: |-
    Verify that you can access the CockroachDB Web UI by first exposing the CockroachDB Service as a publicly accessible OpenShift Route:

    ```
    COCKROACHDB_PUBLIC_SERVICE=`oc get svc -o jsonpath={$.items[1].metadata.name}`
    oc expose --port=http svc $COCKROACHDB_PUBLIC_SERVICE
    ```

    Fetch the OpenShift Route URL and copy/paste it into your browser:

    ```
    COCKROACHDB_UI_URL=`oc get route -o jsonpath={$.items[0].spec.host}`
    echo $COCKROACHDB_UI_URL
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: container
    path: /root
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  difficulty: basic
  timelimit: 200
- slug: step6
  id: 2ojhbl0unxtr
  type: challenge
  title: Connect to the CockroachDB Cluster
  assignment: |-
    Let's talk to the CockroachDB cluster by connecting to the service from within the cluster. CockroachDB is PostgreSQL wire protocol compatible so there's a wide variety of supported clients. For the sake of example, we'll open up a SQL shell using CockroachDB's built-in shell and play around with it a bit.

    ```
    oc run -it --rm cockroach-client --image=cockroachdb/cockroach --restart=Never --command -- ./cockroach sql --insecure --host $COCKROACHDB_PUBLIC_SERVICE
    ```

    Once you see the SQL prompt, run the following to show the default databases:

    ```
    SHOW DATABASES;
    ```

    Create a new database called `bank` and populate a table with arbitrary values:

    ```
    CREATE DATABASE bank;
    CREATE TABLE bank.accounts (id INT PRIMARY KEY, balance DECIMAL);
    INSERT INTO bank.accounts VALUES (1234, 10000.50);
    ```

    Verify the table and values were successfully created:

    ```
    SELECT * FROM bank.accounts;
    ```

    Exit the SQL prompt:
    ```
    \q
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: container
    path: /root
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  difficulty: basic
  timelimit: 200
- slug: step7
  id: s12fzgwuixu7
  type: challenge
  title: Update the CockroachDB Custom Resource
  assignment: |
    Let's now update the CockroachDB `example` Custom Resource and increase the desired number of replicas to `3`:

    ```
    oc patch cockroachdb cockroachdb-sample --type='json' -p '[{"op": "replace", "path": "/spec/statefulset/replicas", "value":3}]'
    ```

    Verify that the CockroachDB Stateful Set is creating two additional pods:

    ```
    oc get pods -l app.kubernetes.io/component=cockroachdb
    ```

    The CockroachDB UI should now reflect these additional nodes as well.
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: container
    path: /root
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  difficulty: basic
  timelimit: 200
- slug: step8
  id: aawbgwx61nyp
  type: challenge
  title: Test CockroachDB Cluster Failover
  assignment: |
    If any CockroachDB member fails it gets restarted or recreated automatically by the Kubernetes infrastructure, and will rejoin the cluster automatically when it comes back up. You can test this scenario by killing any of the pods:

    ```
    oc delete pods -l app.kubernetes.io/component=cockroachdb
    ```

    Watch the pods respawn:

    ```
    oc get pods -l app.kubernetes.io/component=cockroachdb
    ```

    Confirm that the contents of the database still persist by connecting to the database cluster:

    ```
    COCKROACHDB_PUBLIC_SERVICE=`oc get svc -o jsonpath={$.items[1].metadata.name}`
    oc run -it --rm cockroach-client --image=cockroachdb/cockroach --restart=Never --command -- ./cockroach sql --insecure --host $COCKROACHDB_PUBLIC_SERVICE
    ```

    Once you see the SQL prompt, run the following to confirm the database contents are still present:

    ```
    SELECT * FROM bank.accounts;
    ```

    Exit the SQL prompt:
    ```
    \q
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: container
    path: /root
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  difficulty: basic
  timelimit: 200
- slug: step9
  id: gggy0ujzyp3d
  type: challenge
  title: Clean Up
  assignment: |-
    Delete the CockroachDB cluster and all associated resources by deleting the `example` Custom Resource:

    ```
    oc delete cockroachdb cockroachdb-sample
    ```

    Verify that the Stateful Set, pods, and services are removed:

    ```
    oc get statefulset
    oc get pods
    oc get services
    ```
  tabs:
  - title: Terminal 1
    type: terminal
    hostname: container
  - title: Visual Editor
    type: code
    hostname: container
    path: /root
  - title: Web Console
    type: website
    url: https://console-openshift-console.crc-5nvrm-master-0.crc.${_SANDBOX_ID}.instruqt.io
    new_window: true
  difficulty: basic
  timelimit: 200
checksum: "1712457461016215603"
